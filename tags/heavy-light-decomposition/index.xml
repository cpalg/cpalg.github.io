<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heavy-Light Decomposition on CP notebook</title>
    <link>https://cpalg.github.io/tags/heavy-light-decomposition/</link>
    <description>Recent content in Heavy-Light Decomposition on CP notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>v4ngtr</copyright>
    <lastBuildDate>Wed, 07 Oct 2020 03:36:54 +0000</lastBuildDate><atom:link href="https://cpalg.github.io/tags/heavy-light-decomposition/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Query on a tree - VNOI</title>
      <link>https://cpalg.github.io/posts/2020-10-07-qtree/</link>
      <pubDate>Wed, 07 Oct 2020 03:36:54 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-10-07-qtree/</guid>
      <description>Link đề bài:  https://www.spoj.com/problems/QTREE/.  Hướng dẫn: Code mẫu: #include &amp;lt;bits/stdc++.h&amp;gt;#define ii pair&amp;lt;int, int&amp;gt; #define fi first #define se second using namespace std; const int MAX = 2e4+6; int n, T, cnt, Pos[MAX], Par[MAX], Deep[MAX]; int t[MAX*4], nChild[MAX], Head[MAX]; std::vector&amp;lt;ii&amp;gt; g[MAX]; ii Edges[MAX]; void Update(int id, int l, int r, int pos, int val){ if (l==r){ t[id] = val; return; }	int mid = (l+r)/2; if (pos &amp;lt;= mid) Update(id*2, l , mid, pos, val); else Update(id*2+1, mid+1, r, pos, val); t[id] = max(t[id*2], t[id*2+1]); } int ITQuery(int id, int l, int r, int L, int R){ if (R&amp;lt;l || r&amp;lt;L) return -999999; if (L&amp;lt;=l &amp;amp;&amp;amp; r&amp;lt;=R){ return t[id]; } int mid =(l+r)/2; return max(ITQuery(id*2, l, mid, L,R), ITQuery(id*2+1, mid+1, r, L, R)); } int Query(int u, int v){ int res = -999999; // di len toi khi nao cung mot nhanh 	while (Head[u]!</description>
    </item>
    
    <item>
      <title>Sửa cầu - VNOI.</title>
      <link>https://cpalg.github.io/posts/2020-09-27-kbuild/</link>
      <pubDate>Sun, 27 Sep 2020 07:06:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-27-kbuild/</guid>
      <description>Link đề bài:  http://vnoi.info/problems/KBUILD/.  Hướng dẫn:  Để giải quyết bài toán này ta đặt ra 2 vấn đề chính:  Làm thế nào để tìm đường đi giữa q cặp đỉnh (u, v) (Tìm đường đi từ u tới LCA(u,v) và đường đi từ v tới LCA(u,v))/ Làm thế nào để câp nhật các đường đi từ u tới v trong đpt &amp;lt; log2(n).   Để giải quyết hai vấn đề trên ta dùng Heavy-Light Decomposition để phân rã cây thành các chuỗi thẳng từ đó áp dụng segment tree cập nhật đoạn và tìm LCA giữa các cặp đỉnh (u, v).</description>
    </item>
    
    <item>
      <title>Heavy-Light Decomposition - Lý thuyết</title>
      <link>https://cpalg.github.io/posts/2020-09-27-heavy-light-decomposition/</link>
      <pubDate>Sun, 27 Sep 2020 07:05:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-27-heavy-light-decomposition/</guid>
      <description>Heavy-light decomposition (HLD) là kĩ thuật phân tách một cây thành nhiều chuỗi đỉnh (chain) rời nhau. Sau đó, chúng ta có thể áp dụng các cấu trúc dữ liệu như Interval Tree hay Binary-Indexed Tree lên những chuỗi này để có thể cập nhật dữ liệu hoặc trả lời các truy vấn trên một đường đi giữa 2 đỉnh trong cây.
 Thuật toán phân tách cây Trước hết, chúng ta có các định nghĩa như sau:</description>
    </item>
    
  </channel>
</rss>
