<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lý thuyết on CP notebook</title>
    <link>https://cpalg.github.io/tags/l%C3%BD-thuy%E1%BA%BFt/</link>
    <description>Recent content in Lý thuyết on CP notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>v4ngtr</copyright>
    <lastBuildDate>Wed, 18 Nov 2020 07:05:22 +0000</lastBuildDate><atom:link href="https://cpalg.github.io/tags/l%C3%BD-thuy%E1%BA%BFt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2d Segment tree</title>
      <link>https://cpalg.github.io/posts/2020-11-19-it2d/</link>
      <pubDate>Wed, 18 Nov 2020 07:05:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-11-19-it2d/</guid>
      <description>#include &amp;lt;bits/stdc++.h&amp;gt;#define ii vector&amp;lt;int, int&amp;gt; #define fi first #define se second using namespace std; const int MAX = 1111; int n, m, a[MAX][MAX], t[MAX*4][MAX*4], s[MAX][MAX], Q; void BuildY(int idX, int lX, int rX, int idY, int lY, int rY){ if (lY==rY){ if (lX==rX){ t[idX][idY] = a[lX][lY]; } else{ t[idX][idY] = max(t[idX*2][idY], t[idX*2+1][idY]); } return; } int mid = (lY+rY)/2; BuildY(idX, lX, rX, idY*2, lY, mid); BuildY(idX, lX, rX, idY*2+1, mid+1, rY); t[idX][idY] = max(t[idX][idY*2], t[idX][idY*2+1]); } void BuildX(int id, int l, int r){ if (l==r){ BuildY(id,l,r,1,1,m); return; } int mid = (l+r)/2; BuildX(id*2, l, mid); BuildX(id*2+1, mid+1, r); BuildY(id,l,r,1,1,m); } int QueryY(int idX, int id, int l, int r, int L, int R){ if (r&amp;lt;L || R&amp;lt;l) return -1; if (L&amp;lt;=l &amp;amp;&amp;amp; r&amp;lt;=R){ return t[idX][id]; } int mid = (l+r)/2; return max(QueryY(idX,id*2, l, mid, L, R), QueryY(idX, id*2+1, mid+1, r, L, R)); } int Query(int id, int l, int r, int L, int R, int lY, int rY){ if (r &amp;lt; L || R &amp;lt; l) return -1; if (L&amp;lt;=l &amp;amp;&amp;amp; r &amp;lt;=R){ return QueryY(id, 1, 1, m, lY, rY); } int mid = (l+r)/2; return max(Query(id*2, l, mid, L, R, lY, rY), Query(id*2+1, mid+1, r, L, R, lY, rY)); } int Sum(int x, int y, int u, int v){ return s[u][v] - s[u][y-1] - s[x-1][v] + s[x-1][y-1]; } int main(int argc, char const *argv[]) { ios_base::sync_with_stdio(0); cin.</description>
    </item>
    
    <item>
      <title>Thuật toán KMP - Lý thuyết</title>
      <link>https://cpalg.github.io/posts/2020-10-17-kmp/</link>
      <pubDate>Sat, 17 Oct 2020 07:05:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-10-17-kmp/</guid>
      <description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std; string s, t; int p[2000005]; int main(int argc, char const *argv[]) { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin &amp;gt;&amp;gt; s; cin &amp;gt;&amp;gt; t; s= &amp;#39;#&amp;#39; + t + &amp;#34;#&amp;#34; + s; //kmp 	int k = 0; for(int i=2; i&amp;lt;(int)s.size(); i++){ while (k &amp;amp;&amp;amp; s[i]!= s[k+1]) k = p[k]; if (s[i] == s[k+1]) k++; p[i] = k; } // 	int res = 0; for(int i=1; i&amp;lt;(int) s.</description>
    </item>
    
    <item>
      <title>Thuật toán Z - Lý thuyết</title>
      <link>https://cpalg.github.io/posts/2020-10-17-thuat-toan-z/</link>
      <pubDate>Sat, 17 Oct 2020 07:05:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-10-17-thuat-toan-z/</guid>
      <description>cp handbook
#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std; string s; std::vector&amp;lt;int&amp;gt; z; int main(int argc, char const *argv[]) { ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); #ifndef ONLINE_JUDGE 	// freopen(&amp;#34;input.txt&amp;#34;,&amp;#34;r&amp;#34;,stdin); 	#endif 	cin &amp;gt;&amp;gt; s; int n = s.size(); z.resize(n,0); z[0] = n; int l =0, r= 0 ; for(int i=1; i&amp;lt;n; i++){ int x = max(0, min(r-i+1, z[i-l])); while (i+x &amp;lt; n &amp;amp;&amp;amp; s[x] == s[i+x]) x++; z[i] = x; if (x + i -1&amp;gt; r){ l = i; r = i + x -1; } } for(int i=1; i&amp;lt; n; i++){ if (z[i] + i == n) cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout &amp;lt;&amp;lt; n; return 0; } </description>
    </item>
    
    <item>
      <title>Quy hoạch động bao lồi - Lý thuyết</title>
      <link>https://cpalg.github.io/posts/2020-10-02-qhd-bao-loi/</link>
      <pubDate>Fri, 02 Oct 2020 02:35:54 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-10-02-qhd-bao-loi/</guid>
      <description>Kĩ thuật qhd bao lồi là kĩ thuật (hoặc là cấu trúc dữ liệu) dùng để xác định hiệu quả, có tiền xử lý, cực trị của một tập các hàm tuyến tính tại một giá trị của biến độc lập. Mặc dù tên gọi giống nhưng kĩ thuật này lại khá khác biệt so với thuật toán bao lồi của hình học tính toán. Ngoài ra có một kĩ thuật liên quan đến kĩ thuật bao lồi là IT đoạn thẳng.</description>
    </item>
    
    <item>
      <title>Heavy-Light Decomposition - Lý thuyết</title>
      <link>https://cpalg.github.io/posts/2020-09-27-heavy-light-decomposition/</link>
      <pubDate>Sun, 27 Sep 2020 07:05:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-27-heavy-light-decomposition/</guid>
      <description>Heavy-light decomposition (HLD) là kĩ thuật phân tách một cây thành nhiều chuỗi đỉnh (chain) rời nhau. Sau đó, chúng ta có thể áp dụng các cấu trúc dữ liệu như Interval Tree hay Binary-Indexed Tree lên những chuỗi này để có thể cập nhật dữ liệu hoặc trả lời các truy vấn trên một đường đi giữa 2 đỉnh trong cây.
 Thuật toán phân tách cây Trước hết, chúng ta có các định nghĩa như sau:</description>
    </item>
    
    <item>
      <title>CJ và Denise - LQDOJ.</title>
      <link>https://cpalg.github.io/posts/2020-09-24-cjandenise/</link>
      <pubDate>Wed, 23 Sep 2020 11:50:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-24-cjandenise/</guid>
      <description>Link đề bài:  http://lqdoj.edu.vn/problem/cjanddenise.  Hướng dẫn:   Bài toán trên là định nghĩa về chu trình Euler: Chu trình Euler là chu trình mà xuất phát từ một đỉnh bất kì, đi qua tất cả các cạnh của đồ thị và trở về đỉnh ban đầu.
  Một đồ thị là một chu trình Euler khi và chỉ khi nó liên thông và tất cả các đỉnh của nó đều bậc chẵn.</description>
    </item>
    
    <item>
      <title>CJ và vùng đất mới - LQDOJ.</title>
      <link>https://cpalg.github.io/posts/2020-09-24-cjvungdatmoi/</link>
      <pubDate>Wed, 23 Sep 2020 11:48:22 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-24-cjvungdatmoi/</guid>
      <description>Link đề bài:  http://lqdoj.edu.vn/problem/cjvungdatmoi.  Hướng dẫn:  Đây là bài toán tìm thành phần song liên thông (biconnected component). Thành phần song liên thông là một thành phần liên thông mà khi ta bỏ một đỉnh bất kì nào, thì các đỉnh còn lại vẫn cùng thuộc một thành phần liên thông. Ta có một nhận xét là các thành phần song liên thông được nối với nhau bằng các khớp.</description>
    </item>
    
    <item>
      <title>CJ Phản công - LQDOJ.</title>
      <link>https://cpalg.github.io/posts/2020-09-23-cjphancong/</link>
      <pubDate>Wed, 23 Sep 2020 08:06:00 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-23-cjphancong/</guid>
      <description>Link đề bài:  http://lqdoj.edu.vn/problem/cjxaydung.  Hướng dẫn:  Đây là bài toán tìm khớp cơ bản. Xét 2 trường hợp:  u là không gốc:  Nếu có một nhánh con v không lên được trên đỉnh u thì u là khớp (Nếu xóa u thì v và các con của nhánh con này không kết nối được với những đỉnh trên u).   u là gốc:  Nếu đồ thị có trên 2 nhánh con v&#39; và v&#39;&#39;, &amp;hellip; thì u là khớp.</description>
    </item>
    
    <item>
      <title>Xây dựng vùng LS Vagos - LQDOJ.</title>
      <link>https://cpalg.github.io/posts/2020-09-23-cjxaydung/</link>
      <pubDate>Wed, 23 Sep 2020 07:56:54 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-23-cjxaydung/</guid>
      <description>Link đề bài:  http://lqdoj.edu.vn/problem/cjxaydung.  Hướng dẫn:  Đây là bài toán tìm cầu cơ bản, với mỗi cạnh u,v ta đang xét với u là cha của v, nếu từ v chỉ đi được các đỉnh thấp hơn u thì (u,v) là cầu.   Code mẫu: #include &amp;lt;bits/stdc++.h&amp;gt;#define pb push_back #define FOR(i, a, b) for(int i = int(a); i &amp;lt;= int(b); i++) #define FORD(i, a, b) for(int i = int(a); i &amp;gt;= int(b); i--) #define REP(i, r) for(int i = 0; i &amp;lt; r; i++) #define FAST ios_base::sync_with_stdio(0); cin.</description>
    </item>
    
    <item>
      <title>Tìm bao lồi trong mặt phẳng - Lý thuyết</title>
      <link>https://cpalg.github.io/posts/2020-09-23-bao-loi/</link>
      <pubDate>Wed, 23 Sep 2020 07:35:54 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-23-bao-loi/</guid>
      <description>Định nghĩa:  Trong hình học tính toán (computational geometry), bao lồi (convex hull) của một tập điểm là tập lồi nhỏ nhất (theo diện tích, thể tích, …) mà tất cả các điểm đều nằm trong tập đó.
 Thuật toán tìm bao lồi trong mặt phẳng: Thuật toán Graham:   Chọn đỉnh dưới trái cùng làm gốc, đỉnh này chắc chắn thuộc bao lồi.
  Sắp xếp các đỉnh còn lại theo chiều kim đồng hồ tính từ đỉnh đó ( các đỉnh nằm trong một nửa mặt phẳng) (Nếu 2 đỉnh này cùng một tạo một góc so với đỉnh trái cùng thì ta xếp theo xa dần).</description>
    </item>
    
    <item>
      <title>Cách đếm số hoán vị mà không có phần tử nào nằm đúng vị trí. - Lý thuyết</title>
      <link>https://cpalg.github.io/posts/2020-09-22-cach-dem-so-hoan-vi-khong-dung-vi-tri/</link>
      <pubDate>Tue, 22 Sep 2020 05:56:54 +0000</pubDate>
      
      <guid>https://cpalg.github.io/posts/2020-09-22-cach-dem-so-hoan-vi-khong-dung-vi-tri/</guid>
      <description>Bài toán:  Cho môt dãy n phần tử gồm các hoán vị của dãy từ 1 tới n, đếm số hoán vị mà trong các phần tử, không có phần tử nào nằm đúng vị trí.
 Cách làm:  Gọi C[i] là số hoán vị gồm i phần tử mà không có phần tử đúng vị trí. Ta có: C[i] = (i-1) * (C[i-1] + C[i-2]) . Với C[1] = 0, C[2] = 1  Chứng minh: Giả sử ta đã tạo được dãy hoán vị với i-1 phần tử, giờ ta sẽ đặt phần tử thứ i vào tập có tất cả n-1 cách thêm phần tử i:</description>
    </item>
    
  </channel>
</rss>
